version: '3.4'

x-default-logging: &logging
  driver: "json-file" 
  options:
    max-size: "5m"
    max-file: "2"

x-common-variables: &common-variables
  REDIS_BUS: 'redis://txrx-redis:6379'
  REDIS_P2P: 'redis://txrx-redis-p2p:6379'
  TX: 'tx'
  RX: 'rx'
  P2P: 'p2p'
  TTL: 600000
  CONSUMER_BLOCK: 100
  CONSUMER_COUNT: 1000
  STREAM_MAXLEN: 500000
  P2P_MAXLEN: 10000
  NODE_ENV: development

services:
  websocket:
    container_name: txrx-websocket
    image: txrx-websocket:latest
    build:
      context: ./
      args:
        - PACKAGE=websocket
        - DEPS=streamer consumer redis telemetry
    depends_on:
      - redis
    ports:
      - '8080:8080'
    restart: unless-stopped
    environment:
        <<: *common-variables
        WEBSOCKET_PORT: 8080
        CONSUMER_GROUP: 'websocket'
        CONSUMER: 'w0'
        THROTTLE_WARNS: 5
        THROTTLE_MESSAGES: 10
        THROTTLE_TIME_UNIT: 5000
        OTEL_SERVICE_NAME: txrx-websocket
        OTEL_SERVICE_VERSION: 1.0
    networks:
      - bus
    logging: *logging

  dispatcher:
    container_name: txrx-dispatcher
    image: txrx-dispatcher:latest
    build:
      context: ./
      args:
        - PACKAGE=dispatcher
        - DEPS=consumer streamer p2p redis
    depends_on:
      - redis
      - redis-p2p
    restart: unless-stopped
    environment:
        <<: *common-variables
        CONSUMER_GROUP: 'dispatcher'
        CONSUMER: 'd0'
        P2P_PEER: 'dispatcher'
    networks:
      - bus
      - data
      - p2p
    logging: *logging

  rpc:
    container_name: txrx-rpc
    image: txrx-rpc:latest
    build:
      context: ./
      args:
        - PACKAGE=rpc
        - DEPS=consumer streamer p2p backend redis
    depends_on:
      - redis
      - redis-p2p
    restart: unless-stopped
    environment:
        <<: *common-variables
        CONSUMER_GROUP: 'rpc'
        CONSUMER: 'r0'
        P2P_PEER: 'rpc'
        RPC: 'rpc'
        HANDLERS_DIR: backend/dist/src/handlers/general
        DATABASE_URL: postgres://postgres@txrx-postgres:5432/txrx
        REDIS_URL: 'redis://txrx-redis:6379'
    networks:
      - bus
      - data
      - p2p
    logging: *logging

  rpc-auth:
    container_name: txrx-rpc-auth
    image: txrx-rpc-auth:latest
    build:
      context: ./
      args:
        - PACKAGE=rpc
        - DEPS=consumer streamer p2p backend redis
    depends_on:
      - redis
      - redis-p2p
      - postgres
    restart: unless-stopped
    environment:
        <<: *common-variables
        CONSUMER_GROUP: 'rpc'
        CONSUMER: 'r0'
        P2P_PEER: 'rpc-auth'
        RPC: 'auth'
        HANDLERS_DIR: backend/dist/src/handlers/auth
        DATABASE_URL: postgres://postgres@txrx-postgres:5432/txrx
        REDIS_URL: 'redis://txrx-redis:6379'
    networks:
      - bus
      - data
      - p2p
    logging: *logging

  redis:
    container_name: txrx-redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - 6379:6379
    networks:
      - bus
    logging: *logging

  redis-p2p:
    container_name: txrx-redis-p2p
    image: redis:latest
    restart: unless-stopped
    ports:
      - 7379:6379
    networks:
      - p2p
    logging: *logging

  postgres:
    container_name: txrx-postgres
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - '5432:5432'
    expose:
      - '5432'
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - data
    logging: *logging
  
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: txrx-jaeger
    command:
      - "--memory.max-traces"
      - "8000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://txrx-prometheus:9090"
      - "--prometheus.query.support-spanmetrics-connector=true"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "16686:16686" 
      - "4317"                           
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

  grafana:
    image: grafana/grafana:10.1.2
    container_name: txrx-grafana
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    environment:
      - "GF_INSTALL_PLUGINS=grafana-opensearch-datasource"
    volumes:
      - ./telemetry/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./telemetry/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3001:3001"
    logging: *logging

  otelcol:
    image: otel/opentelemetry-collector-contrib:0.86.0
    container_name: txrx-otelcol
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-observability.yml", "--config=/etc/otelcol-config-extras.yml" ]
    volumes:
      - ./telemetry/otelcol/otelcol-config.yml:/etc/otelcol-config.yml
      - ./telemetry/otelcol/otelcol-observability.yml:/etc/otelcol-observability.yml
      - ./telemetry/otelcol/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml
    ports:
      - "4317"          # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
    depends_on:
      - jaeger
    logging: *logging

  prometheus:
    image: quay.io/prometheus/prometheus:v2.47.0
    container_name: txrx-prometheus
    restart: unless-stopped
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
    volumes:
      - ./telemetry/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "9090:9090"
    logging: *logging

networks:
  bus:
    name: txrx-bus
  data:
    name: txrx-data
  p2p:
    name: txrx-p2p

volumes:
  postgres:
    driver: local
